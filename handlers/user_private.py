from aiogram import types, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from krbs.keyboard import start_kb
user_private_router = Router()

class AddFlower(StatesGroup):
    flower = State()
    count = State()


@user_private_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üòô\n–≠—Ç–æ –±–æ—Ç —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π —Ü–≤–µ—Ç–æ—á–∫–∏!ü•∞\n–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç—ã –Ω–∏–∂–µ.', reply_markup=start_kb)
    await state.set_state(AddFlower.flower)



@user_private_router.message(F.text == 'üåπ–†–æ–∑—ã')
async def rosy(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ üåπ—Ä–æ–∑—ã, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤')
    await state.update_data(flower='üåπ')
    await state.set_state(AddFlower.count)
    

@user_private_router.message(F.text == 'üå∑–¢—é–ª—å–ø–∞–Ω—ã')
async def tulip(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ üå∑—Ç—é–ª—å–ø–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤')
    await state.update_data(flower='üå∑')
    await state.set_state(AddFlower.count)

@user_private_router.message(F.text == 'üåº–†–æ–º–∞—à–∫–∏')
async def rose(message: types.Message,  state: FSMContext):
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ üåº—Ä–æ–º–∞—à–∫–∏, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤')
    await state.update_data(flower='üåº')
    await state.set_state(AddFlower.count)

@user_private_router.message(AddFlower.count, F.text)
async def count(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        return
    elif int(message.text) > 4096:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ 4096 (—Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–∞—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤üò≠)')
        return
    elif int(message.text) <= 0:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return
    num = int(message.text)
    await state.update_data(count=num)
    _ = 0
    t_ = ''
    data = await state.get_data()
    while _ < num:
        t_ += str(data['flower'])
        _ += 1
    await message.answer(t_)
    _ = 0
    t_ = ''

@user_private_router.message(AddFlower.count)
async def error(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ –Ω–∏–±—É–¥—å —á–∏—Å–ª–æ –¥–æ 4096')
    return